# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.39
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_zinnia', [dirname(__file__)])
        except ImportError:
            import _zinnia
            return _zinnia
        if fp is not None:
            try:
                _mod = imp.load_module('_zinnia', fp, pathname, description)
            finally:
                fp.close()
                return _mod
    _zinnia = swig_import_helper()
    del swig_import_helper
else:
    import _zinnia
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def version():
  return _zinnia.version()
version = _zinnia.version
class Character(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Character, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Character, name)
    __repr__ = _swig_repr
    def set_value(self, *args): return _zinnia.Character_set_value(self, *args)
    def value(self): return _zinnia.Character_value(self)
    def set_width(self, *args): return _zinnia.Character_set_width(self, *args)
    def set_height(self, *args): return _zinnia.Character_set_height(self, *args)
    def width(self): return _zinnia.Character_width(self)
    def height(self): return _zinnia.Character_height(self)
    def clear(self): return _zinnia.Character_clear(self)
    def add(self, *args): return _zinnia.Character_add(self, *args)
    def strokes_size(self): return _zinnia.Character_strokes_size(self)
    def stroke_size(self, *args): return _zinnia.Character_stroke_size(self, *args)
    def x(self, *args): return _zinnia.Character_x(self, *args)
    def y(self, *args): return _zinnia.Character_y(self, *args)
    def parse(self, *args): return _zinnia.Character_parse(self, *args)
    def what(self): return _zinnia.Character_what(self)
    __swig_destroy__ = _zinnia.delete_Character
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _zinnia.new_Character(*args)
        try: self.this.append(this)
        except: self.this = this
    def toString(self): return _zinnia.Character_toString(self)
Character_swigregister = _zinnia.Character_swigregister
Character_swigregister(Character)

class Result(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Result, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Result, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def value(self, *args): return _zinnia.Result_value(self, *args)
    def score(self, *args): return _zinnia.Result_score(self, *args)
    def size(self): return _zinnia.Result_size(self)
    __swig_destroy__ = _zinnia.delete_Result
    __del__ = lambda self : None;
Result_swigregister = _zinnia.Result_swigregister
Result_swigregister(Result)

class Recognizer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Recognizer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Recognizer, name)
    __repr__ = _swig_repr
    def open(self, *args): return _zinnia.Recognizer_open(self, *args)
    def close(self): return _zinnia.Recognizer_close(self)
    def size(self): return _zinnia.Recognizer_size(self)
    def value(self, *args): return _zinnia.Recognizer_value(self, *args)
    def classify(self, *args): return _zinnia.Recognizer_classify(self, *args)
    def what(self): return _zinnia.Recognizer_what(self)
    __swig_destroy__ = _zinnia.delete_Recognizer
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _zinnia.new_Recognizer(*args)
        try: self.this.append(this)
        except: self.this = this
Recognizer_swigregister = _zinnia.Recognizer_swigregister
Recognizer_swigregister(Recognizer)

class Trainer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Trainer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Trainer, name)
    __repr__ = _swig_repr
    def add(self, *args): return _zinnia.Trainer_add(self, *args)
    def clear(self): return _zinnia.Trainer_clear(self)
    def train(self, *args): return _zinnia.Trainer_train(self, *args)
    __swig_getmethods__["convert"] = lambda x: _zinnia.Trainer_convert
    if _newclass:convert = staticmethod(_zinnia.Trainer_convert)
    __swig_getmethods__["makeHeader"] = lambda x: _zinnia.Trainer_makeHeader
    if _newclass:makeHeader = staticmethod(_zinnia.Trainer_makeHeader)
    def what(self): return _zinnia.Trainer_what(self)
    __swig_destroy__ = _zinnia.delete_Trainer
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _zinnia.new_Trainer(*args)
        try: self.this.append(this)
        except: self.this = this
Trainer_swigregister = _zinnia.Trainer_swigregister
Trainer_swigregister(Trainer)

def Trainer_convert(*args):
  return _zinnia.Trainer_convert(*args)
Trainer_convert = _zinnia.Trainer_convert

def Trainer_makeHeader(*args):
  return _zinnia.Trainer_makeHeader(*args)
Trainer_makeHeader = _zinnia.Trainer_makeHeader

VERSION = _zinnia.VERSION


